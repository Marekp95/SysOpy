Zadanie - zestaw 3

Tworzenie procesów. Œrodowisko procesu, sterowanie procesami.

Zadanie 1. Tworzenie procesów (fork, vfork, clone)

Napisz program, który sprawdza wydajnoœæ systemu w zakresie tworzenia procesów. Proces macierzysty powinien wykonaæ N cykli, w których wykonuje dwie operacje, pierwsza to utworzenie nowego procesu, druga to oczekiwanie na jego zakoñczenie.
Do tworzenia nowych operacji wykorzystaj cztery metody:

a) u¿ycie funkcji fork
b) u¿ycie funkcji vfork
c) u¿ycie funkcji clone z odpowiednimi opcjami, rozwi¹zanie odpowiadaj¹ce funkcji fork
d) u¿ycie funkcji clone z odpowiednimi opcjami, rozwi¹zanie odpowiadaj¹ce funkcji vfork

Program powinien przed wykonaniem cykli zdefiniowaæ zmienn¹ globaln¹ licznik z wartoœci¹ pocz¹tkow¹ równ¹ 0.
Proces potomny zaraz po utworzeniu powinien wykonaæ dwie operacje: zwiêkszyæ wartoœæ zmiennej licznik o 1 i wywo³aæ funkcje _exit.
Po zakoñczeniu cykli proces macierzysty powinien wypisaæ wartoœæ zmiennej licznik.

PrzeprowadŸ pomiary czasów (rzeczywistego, u¿ytkownika i systemowego) zarówno dla procesu macierzystego jak i dla wszystkich procesów potomnych (³¹cznie) w ka¿dym z czterech wariantów: a), b), c) i d). Testy przeprowadŸ dla czterech ró¿nych wartoœci N, tak by czasy rzeczywiste procesu macierzystego by³y w zakresie od kilku sekund do oko³o minuty.
Wyniki uzyskanych pomiarów wraz wykresami i komentarzem przeka¿ w pliku wyniki.pdf

Wykresy powinny pokazywaæ zale¿noœæ czasów (wydajnoœci) od wartoœci N dla metod od a) do d), poprzez oddzielne wykresy dla:
- czasu systemowego
- czasu u¿ytkownika
- sumy czasu u¿ytkownika i systemowego
- czasu rzeczywistego
Na pojedynczym wykresie przedstawiamy wyniki dla czterech analizowanych metod - od a) do d), wykres ten tworzymy w trzech wariantach:
w1) tylko czas procesu macierzystego
w2) tylko ³¹czny czas procesów potomnych
w3) sumaryczny czas w1) i w2)
Zatem otrzymujemy 12 (4 x 3) wykresów.
Zadanie 2. Drzewo procesów zgodne z drzewem katalogów

Napisz program fcounter, który w zale¿noœci od liczby podkatalogów pierwszego poziomu znajduj¹cych siê w katalogu (wariant do wyboru)

- wskazanym jako argument programu (œcie¿ka wzglêdna lub bezwzglêdna, domyœlnie w katalogu bie¿¹cym), 

- (*) zdefiniowanym jako zmienna œrodowiskowa PATH_TO_BROWSE, (œcie¿ka wzglêdna lub bezwzglêdna do katalogu, w przypadku braku zdefiniowanej zmiennej w katalogu bie¿¹cym),

wygeneruje odpowiedni¹ liczbê procesów potomnych (jeden proces dla jednego podkatalogu), a ka¿dy z tych procesów wykona przez odpowiedni¹ funkcjê z rodziny exec program fcounter (rekurencja).

Je¿eli w katalogu nie ma podkatalogów to proces programu fcounter przekazuje do procesu macierzystego iloœæ plików w swoim katalogu poprzez funkcjê exit. Je¿eli istniej¹ podkatalogi to czeka na zakoñczenie procesów potomnych i przekazuje liczbê swoich plików powiêkszon¹ o wartoœci uzyskane od tych procesów.
Ka¿dy proces opcjonalnie (argument -v wywo³ania programu fcounter lub jego brak) wypisuje œcie¿kê do katalogu, który obs³uguje, liczbê swoich plików oraz liczbê sumaryczn¹ plików swoich i tych otrzymanych z procesów potomnych.

Nale¿y pamiêtaæ, aby po ka¿dym rekurencyjnym wywo³aniu w zale¿noœci od wybranego wariantu odpowiednio zmodyfikowaæ zmienn¹ œrodowiskow¹ lub argument wywo³ania programu.

(*) Program powinien uwzglêdniaæ dodatkowo, drug¹ zmienn¹ œrodowiskow¹ EXT_TO_BROWSE, której wartoœæ decyduje o uwzglêdnianych plikach, np. gdy EXT_TO_BROWSE=c to analizowane powinny byæ tylko pliki z takimi rozszerzeniami. Brak tej zmiennej lub jej wartoœci oznacza uwzglêdnianie wszystkich plików.

Zak³adamy, ¿e liczba plików w ca³ym drzewie jest odpowiednio ma³a, tak, ¿e nie nast¹pi przepe³nienie zakresu u¿ywanej liczby.
Wymagane jest, aby proces macierzysty pierwsze utworzy³ wszystkie procesy dla podkatalogów, a dopiero póŸniej oczekiwa³ na zwrócone przez nie wartoœci.
Dla celów testowych wprowadŸ te¿ opcjonalny argument programu -w , który spowoduje, ¿e ka¿dy proces przed oczekiwaniem na procesy potomne (jeœli ich nie tworzy³ to przed wywo³aniem funkcji exit) wywo³a funkcjê sleep dla np. 15 sekund. W tym czasie w drugim terminalu wywo³aj polecenie ps -HC fcounter (lub pstree z pidem pierwszego procesu), aby zobaczyæ utworzone drzewo procesów.